{"version":3,"sources":["components/Asset.js","components/AssetList.js","freighter-sc.js","components/ControlPanel.js","components/Account.js","App.js","reportWebVitals.js","index.js"],"names":["Asset","ast","balance","className","AssetList","account","assets","map","assetName","undefined","asset","checkFreighter","a","freighterApi","isConnected","retrievePublicKey","publicKey","error","getPublicKey","console","retrieveNetwork","network","getNetwork","checkBasicReq","userPublicKey","wallet","userSignTransaction","xdr","signedTransaction","signTransaction","payment","paymentAmt","destination","server","StellarSdk","Server","paymentToDest","native","amount","fetchBaseFee","txOptions","fee","networkPassphrase","loadAccount","accountA","transaction","TransactionBuilder","addOperation","Operation","setTimeout","StellarBase","TimeoutInfinite","build","transactionString","toEnvelope","toXDR","xdrPay","topUp","turretBaseUrl","body","txFunctionFee","axios","post","res","data","generateXDRToken","txFunctionHashes","log","tempAcct","Account","testnet","txBuilder","Networks","TESTNET","hash","manageData","name","value","tx","txHashed","txSigned","alert","runFunc","xdrToken","turretURL","funcHash","source","headers","response","turretSign","signer","signature","Transaction","addSignature","sendTransaction","signedTxn","serverUrl","txn","txnString","txnSignedComplete","txnToSubmit","fromXDR","submitTransaction","getAssets","balances","asset_code","type","asset_type","getFuncBalance","get","ControlPanel","setAssets","turretPublicKey","funcBaseUrl","funcAddresses","setFuncBalance","buttonTopUp","fsc","payXDR","funcBalance","buttonRunFunc","runResult","resultSigned","successful","onClick","App","useState","setAccount","setXDRToken","useEffect","getData","req","pk","then","catch","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.01402f53.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Asset = ({ast, balance}) => {\n      \n    return(\n        <div className=\"asset\">\n            <li className=\"asset-item\">{ast + '\\t' + balance}</li>\n        </div>\n    );\n}\n\nexport default Asset;","import React from \"react\";\nimport Asset from './Asset';\n\nconst AssetList = ({account, assets}) => { \n\n    const processItem = (ast) => {\n        let assetName = ''\n        if (ast.asset === undefined){\n            assetName = 'XLM'\n        }else{\n            assetName = ast.asset\n        }\n        return (<Asset ast={assetName} balance={ast.balance}/>)\n    }\n      \n    return(\n        <div>\n            <div className=\"assets-title\">\n                <h1>Assets</h1>\n            </div>\n            <div className=\"assets-container\">\n                <ul className=\"assets-list\">\n                    {assets.map(processItem)}                \n                </ul>\n            </div>\n        </div>\n    );\n}\n\nexport default AssetList;","import freighterApi from \"@stellar/freighter-api\";\nimport StellarSdk from \"stellar-sdk\";\nimport StellarBase from \"stellar-base\";\nimport axios from \"axios\";\n\nconst checkFreighter = async () => {\n    if (freighterApi.isConnected()) {\n        return true\n    }\n    return false\n};\n\nconst retrievePublicKey = async () => {\n    let publicKey = \"\";\n    let error = \"\";\n    try {\n        publicKey = await freighterApi.getPublicKey();\n    } catch (e) {\n        error = e;\n    }\n    if (error) {\n        console.error(error);\n        return false\n    }\n    return publicKey;\n};\n\nconst retrieveNetwork = async () => {\n    let network = \"\";\n    let error = \"\";\n    try {\n        network = await freighterApi.getNetwork();\n    } catch (e) {\n        error = e;\n    }\n    if (error) {\n        console.error(error)\n        return false;\n    }\n    if (network !== 'TESTNET'){\n        return false\n    }\n    return true\n};\n\nconst checkBasicReq = async () => {\n    const userPublicKey     = await retrievePublicKey()\n    const network           = await retrieveNetwork()\n    const wallet            = await checkFreighter()\n\n    return userPublicKey && network && wallet\n};\n\nconst userSignTransaction = async (xdr: string, network: string) => {\n    let signedTransaction = \"\";\n    let error = \"\";\n    try {\n        signedTransaction = await freighterApi.signTransaction(xdr, network);\n    } catch (e) {\n        error = e;\n    }\n\n    if (error) {\n        return error;\n    }\n    return signedTransaction;\n};\n\nconst payment = async (paymentAmt: string, destination: string, publicKey: string) => {\n    const server = new StellarSdk.Server('https://horizon-testnet.stellar.org');\n    const paymentToDest = {\n        destination: destination,\n        asset: StellarSdk.Asset.native(),\n        amount: paymentAmt,\n    }\n    const txOptions = {\n        fee: await server.fetchBaseFee(),\n        networkPassphrase: 'Test SDF Network ; September 2015',\n    }\n    const accountA = await server.loadAccount(publicKey)\n    const transaction = new StellarSdk.TransactionBuilder(accountA, txOptions)\n        .addOperation(StellarSdk.Operation.payment(paymentToDest))\n        .setTimeout(StellarBase.TimeoutInfinite)\n        .build()\n    const transactionString = transaction.toEnvelope().toXDR('base64')\n    const xdrPay = await userSignTransaction(transactionString, \"TESTNET\")\n    return xdrPay\n}\n\nconst topUp = async (xdrPay: string, turretBaseUrl: string, publicKey: string) => {\n    const body = {\n        txFunctionFee: xdrPay\n    }\n    const res = await axios.post(turretBaseUrl + 'tx-fees/' + publicKey, body)\n    return res.data\n};\n\nconst generateXDRToken = async (txFunctionHashes: string, publicKey: string) => {\n    console.log('Generating XDR Token...');\n    try {\n        // setup a fake account with a -1 seq number.\n        // This ensures a zero seq number when the transaction is built (TransactionBuilder increments once).\n        const tempAcct = new StellarSdk.Account(publicKey, '-1');\n        const testnet = new StellarSdk.Server('https://horizon-testnet.stellar.org')\n        const fee = await testnet.fetchBaseFee();\n        const txBuilder = new StellarSdk.TransactionBuilder(tempAcct, {fee, networkPassphrase: StellarSdk.Networks.TESTNET});\n        // add the manage data operations to specify the allowed txHashes to be run for this user\n        for (const hash of txFunctionHashes) {\n            txBuilder.addOperation(StellarSdk.Operation.manageData({\n                name: \"txFunctionHash\",\n                value: hash\n            }));\n        }\n        // set TTL on the token for 1 hour\n        const tx = txBuilder.setTimeout(24*60*60).build();\n        // sign transaction\n        const txHashed = tx.toEnvelope().toXDR('base64')\n        const txSigned = await userSignTransaction(txHashed, \"TESTNET\")\n        return txSigned;\n    } catch (e) {\n        alert(e);\n    }\n};\n\nconst runFunc = async(\n    publicKey: string, \n    xdrToken: string, \n    turretURL: string,\n    funcHash: string\n    ) => {\n        console.log('Running function...')\n        const body = {\n            source: publicKey\n        }\n        const headers = {\n            \"Authorization\": \"Bearer \" + xdrToken\n        }\n        const response = await axios.post(turretURL + 'tx-functions/' + funcHash, body, {headers: headers})\n        return response.data\n};\n\nconst turretSign = async(xdr: string, signer: string, signature: string) => {\n    console.log('Adding turret signature to transaction...')\n    const transaction = new StellarSdk.Transaction(xdr, StellarSdk.Networks.TESTNET)\n    transaction.addSignature(signer, signature)\n    return transaction.toXDR()\n};\n\nconst sendTransaction = async(signedTxn: string) => {\n    console.log('Sending transaction...')\n    const serverUrl = \"https://horizon-testnet.stellar.org\"\n    const server = new StellarSdk.Server(serverUrl)\n    var txn = new StellarSdk.Transaction(signedTxn, StellarSdk.Networks.TESTNET)\n    const txnString = txn.toEnvelope().toXDR('base64')\n    const txnSignedComplete = await userSignTransaction(txnString, \"TESTNET\")\n    const txnToSubmit = StellarSdk.TransactionBuilder.fromXDR(\n        txnSignedComplete,\n        serverUrl\n    );\n    const response = await server.submitTransaction(txnToSubmit);\n    return response\n};\n\nconst getAssets = async (userPublicKey) => {\n    const server = new StellarSdk.Server('https://horizon-testnet.stellar.org')\n    const account = await server.loadAccount(userPublicKey);\n    const balances = account.balances.map( balance => ({\n        asset: balance.asset_code,\n        type: balance.asset_type,\n        balance: balance.balance\n    }))\n\n    return balances\n}\n\nconst getFuncBalance = async (\n    xdrToken: string, \n    turretURL: string\n    ) => {\n        const headers = {\n            \"Authorization\": \"Bearer \" + xdrToken\n        }\n        const response = await axios.get(turretURL + 'tx-fees/', {headers: headers})\n        return response.data.balance\n}\n\nexport {\n    checkFreighter,\n    retrievePublicKey,\n    retrieveNetwork,\n    checkBasicReq,\n    userSignTransaction,\n    payment,\n    topUp,\n    generateXDRToken,\n    runFunc,\n    turretSign,\n    sendTransaction,\n    getAssets,\n    getFuncBalance,\n}","import React from \"react\";\nimport * as fsc from \"../freighter-sc\";\n\nconst ControlPanel = ({account, setAssets, turretPublicKey, funcBaseUrl, funcAddresses, xdrToken, setFuncBalance}) => {\n  \n    const buttonTopUp = async () => {\n        const requirements = await fsc.checkBasicReq();\n  \n        if (requirements){\n            const payXDR            = await fsc.payment('10', turretPublicKey, account)\n            await fsc.topUp(payXDR, funcBaseUrl, account);\n            const assets            = await fsc.getAssets(account);\n            const funcBalance       = await fsc.getFuncBalance(xdrToken, funcBaseUrl);\n            setAssets(assets)\n            setFuncBalance(funcBalance)\n        }else{\n            alert('Something went wrong: User must have Freighter extension and must be on TESTNET')\n        }\n    };\n  \n    const buttonRunFunc = async () => {\n        const requirements = await fsc.checkBasicReq();\n    \n        if (requirements){\n            // const xdrToken          = await fsc.generateXDRToken(funcAddresses, account)\n            const runResult         = await fsc.runFunc(account, xdrToken, funcBaseUrl, funcAddresses[0])\n            console.log(runResult)\n            const resultSigned      = await fsc.turretSign(runResult.xdr, runResult.signer, runResult.signature)\n            const res               = await fsc.sendTransaction(resultSigned)\n            console.log(res)\n            if (res.successful === true) {\n                const assets            = await fsc.getAssets(account);\n                const funcBalance       = await fsc.getFuncBalance(xdrToken, funcBaseUrl);\n                setAssets(assets)\n                setFuncBalance(funcBalance)\n            }\n        }else{\n            alert('Something went wrong: User must have Freighter extension and must be on TESTNET')\n        }\n    };\n    return(\n        <div className=\"cpanel\">\n            <button onClick={buttonTopUp}>\n            Top Up\n            </button>\n            <button onClick={buttonRunFunc}>\n            Run\n            </button>\n        </div>\n    );\n}\n\nexport default ControlPanel;","import React from \"react\";\n\nconst Account = ({account, funcBalance, xdrToken}) => {\n      \n    return(\n        // <div className=\"account\">\n        <div className=\"assets-container\">\n            <ul className=\"assets-list\">\n                <li className=\"assets-item\">Account: {account}</li>   \n                <li className=\"assets-item\">Balance: {funcBalance}</li>           \n            </ul>\n        </div>\n    );\n}\n\nexport default Account;","import React, {useState, useEffect} from \"react\"\nimport './App.css';\nimport AssetList from \"./components/AssetList\";\nimport ControlPanel from \"./components/ControlPanel\";\nimport Account from \"./components/Account\";\nimport * as fsc from \"./freighter-sc\";\n\nfunction App() {\n  const [assets, setAssets]             = useState([]);\n  const [account, setAccount]           = useState(\"\");\n  const [funcBalance, setFuncBalance]   = useState(\"\");\n  const [xdrToken, setXDRToken]         = useState(\"\"); \n\n  const turretPublicKey     = \"GB4OYM7TQTJSROWXHOJLKAX2IJ2QN4I6S6GCJH4MGWVTAO5Q5DPNADXX\"\n  const funcBaseUrl         = \"https://stellar-turrets-testnet.sdf-ecosystem.workers.dev/\"\n  const funcAddresses       = ['9d64bd82134a1c141501dc16dca992446ecdc1812c1d75e8aab53443f879bf87']\n\n  useEffect(() => {\n    const getData = async () => {\n      const req           = await fsc.checkBasicReq();\n      const pk            = await fsc.retrievePublicKey();\n      const assets        = await fsc.getAssets(pk);\n      const xdrToken      = await fsc.generateXDRToken(funcAddresses, pk);\n      const funcBalance   = await fsc.getFuncBalance(xdrToken, funcBaseUrl);\n      return {req, pk, assets, xdrToken, funcBalance}\n    }\n\n    getData().then((res) => {\n        if (res.req) {\n          if (res.pk) {\n            setAccount(res.pk)\n            setAssets(res.assets)\n            setXDRToken(res.xdrToken)\n            setFuncBalance(res.funcBalance)\n          }else{\n            setAccount('Please Login')\n          }\n        }\n      }\n    )\n    .catch(console.error)\n\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header>\n        Token Royale\n      </header>\n        <Account \n          account={account} \n          funcBalance={funcBalance}\n        />\n        <ControlPanel \n          account={account} \n          setAssets={setAssets}\n          turretPublicKey={turretPublicKey}\n          funcBaseUrl={funcBaseUrl}\n          funcAddresses={funcAddresses}\n          xdrToken={xdrToken}\n          setFuncBalance={setFuncBalance}\n        />\n        <AssetList \n          account={account} \n          setAccount={setAccount} \n          assets={assets}\n        />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}