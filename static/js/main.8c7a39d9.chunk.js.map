{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["App","checkFreighter","a","freighterApi","isConnected","alert","retrievePublicKey","publicKey","error","getPublicKey","retrieveNetwork","network","getNetwork","className","src","logo","alt","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gUAAe,MAA0B,iC,2CCqF1BA,MAhFf,WAEE,IAAMC,EAAc,uCAAG,sBAAAC,EAAA,sDACjBC,IAAaC,cACfC,MAAM,uBAENA,MAAM,oDAJa,2CAAH,qDAQdC,EAAiB,uCAAG,8BAAAJ,EAAA,6DACpBK,EAAY,GACZC,EAAQ,GAFY,kBAKJL,IAAaM,eALT,OAKtBF,EALsB,uDAOtBC,EAAK,KAPiB,YAUpBA,EAVoB,0CAWfA,GAXe,QAcxBH,MAAM,mBAAqBE,GAdH,yDAAH,qDAiBjBG,EAAe,uCAAG,8BAAAR,EAAA,6DAClBS,EAAU,GACVH,EAAQ,GAFU,kBAKJL,IAAaS,aALT,OAKpBD,EALoB,uDAOpBH,EAAK,KAPe,YAUlBA,EAVkB,0CAWbA,GAXa,QActBH,MAAM,WAAaM,GAdG,yDAAH,qDAkCrB,OACE,qBAAKE,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,qBAAKC,IAAKC,EAAMF,UAAU,WAAWG,IAAI,SACzC,wBAAQC,QAAShB,EAAjB,0BAGA,wBAAQgB,QAASX,EAAjB,4BAGA,wBAAQW,QAASP,EAAjB,+BChEOQ,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.8c7a39d9.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.css';\nimport freighterApi from \"@stellar/freighter-api\";\nimport StellarSdk from \"stellar-sdk\";\n\nfunction App() {\n\n  const checkFreighter = async () => {\n    if (freighterApi.isConnected()) {\n      alert(\"User has Freighter!\");\n    }else{\n      alert(\"You must install the Freighter Chrome extension!\");\n    }\n  };\n  \n  const retrievePublicKey = async () => {\n    let publicKey = \"\";\n    let error = \"\";\n  \n    try {\n      publicKey = await freighterApi.getPublicKey();\n    } catch (e) {\n      error = e;\n    }\n  \n    if (error) {\n      return error;\n    }\n  \n    alert('Your Public Key:' + publicKey);\n  };\n\n  const retrieveNetwork = async () => {\n    let network = \"\";\n    let error = \"\";\n  \n    try {\n      network = await freighterApi.getNetwork();\n    } catch (e) {\n      error = e;\n    }\n  \n    if (error) {\n      return error;\n    }\n  \n    alert('Network:' + network);\n  };\n\n  const userSignTransaction = async (xdr: string, network: string) => {\n    let signedTransaction = \"\";\n    let error = \"\";\n  \n    try {\n      signedTransaction = await freighterApi.signTransaction(xdr, network);\n    } catch (e) {\n      error = e;\n    }\n  \n    if (error) {\n      return error;\n    }\n  \n    return signedTransaction;\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <button onClick={checkFreighter}>\n          Check Wallet\n        </button>\n        <button onClick={retrievePublicKey}>\n          Get Public Key\n        </button>\n        <button onClick={retrieveNetwork}>\n          Get Network\n        </button>\n      </header>\n      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}