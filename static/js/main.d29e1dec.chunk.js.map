{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["App","checkFreighter","a","freighterApi","isConnected","alert","retrievePublicKey","publicKey","error","getPublicKey","retrieveNetwork","network","getNetwork","userSignTransaction","xdr","signedTransaction","signTransaction","payment","paymentAmt","destination","server","StellarSdk","Server","paymentToDest","asset","Asset","native","amount","fetchBaseFee","txOptions","fee","networkPassphrase","loadAccount","accountA","transaction","TransactionBuilder","addOperation","Operation","setTimeout","StellarBase","TimeoutInfinite","build","transactionString","toEnvelope","toXDR","xdrPay","topUp","turretBaseUrl","body","txFunctionFee","axios","post","res","console","log","data","generateXDRToken","txFunctionHashes","tempAcct","Account","testnet","txBuilder","Networks","TESTNET","hash","manageData","name","value","tx","txHashed","txSigned","runFunc","xdrToken","turretURL","funcHash","source","headers","response","turretSign","signer","signature","Transaction","addSignature","sendTransaction","signedTxn","serverUrl","txn","txnString","txnSignedComplete","txnToSubmit","fromXDR","submitTransaction","buttonTopUp","payXDR","buttonRunFunc","runResult","resultSigned","className","src","logo","alt","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d29e1dec.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.css';\nimport freighterApi from \"@stellar/freighter-api\";\nimport StellarSdk from \"stellar-sdk\";\nimport StellarBase from \"stellar-base\";\nimport axios from \"axios\";\n\nfunction App() {\n\n  const checkFreighter = async () => {\n    if (freighterApi.isConnected()) {\n      alert(\"User has Freighter!\");\n    }else{\n      alert(\"You must install the Freighter Chrome extension!\");\n    }\n  };\n  \n  const retrievePublicKey = async () => {\n    let publicKey = \"\";\n    let error = \"\";\n  \n    try {\n      publicKey = await freighterApi.getPublicKey();\n    } catch (e) {\n      error = e;\n    }\n  \n    if (error) {\n      return error;\n    }\n  \n    alert('Your Public Key:' + publicKey);\n  };\n\n  const retrieveNetwork = async () => {\n    let network = \"\";\n    let error = \"\";\n  \n    try {\n      network = await freighterApi.getNetwork();\n    } catch (e) {\n      error = e;\n    }\n  \n    if (error) {\n      return error;\n    }\n  \n    alert('Network:' + network);\n  };\n\n  const userSignTransaction = async (xdr: string, network: string) => {\n    let signedTransaction = \"\";\n    let error = \"\";\n  \n    try {\n      signedTransaction = await freighterApi.signTransaction(xdr, network);\n    } catch (e) {\n      error = e;\n    }\n  \n    if (error) {\n      return error;\n    }\n  \n    return signedTransaction;\n  };\n\n  const payment = async (paymentAmt: string, destination: string, publicKey: string) => {\n    const server = new StellarSdk.Server('https://horizon-testnet.stellar.org');\n    const paymentToDest = {\n        destination: destination,\n        asset: StellarSdk.Asset.native(),\n        amount: paymentAmt,\n    }\n    const txOptions = {\n        fee: await server.fetchBaseFee(),\n        networkPassphrase: 'Test SDF Network ; September 2015',\n    }\n    const accountA = await server.loadAccount(publicKey)\n    const transaction = new StellarSdk.TransactionBuilder(accountA, txOptions)\n        .addOperation(StellarSdk.Operation.payment(paymentToDest))\n        .setTimeout(StellarBase.TimeoutInfinite)\n        .build()\n\n    const transactionString = transaction.toEnvelope().toXDR('base64')\n    const xdrPay = await userSignTransaction(transactionString, \"TESTNET\")\n    return xdrPay\n  }\n\n  const topUp = async (xdrPay: string, turretBaseUrl: string, publicKey: string) => {\n    const body = {\n        txFunctionFee: xdrPay\n    }\n\n    const res = await axios.post(turretBaseUrl + 'tx-fees/' + publicKey, body)\n    console.log(res.data)\n  };\n\n  const generateXDRToken = async (txFunctionHashes: string, publicKey: string) => {\n    console.log('Generating XDR Token...');\n    try {\n        // setup a fake account with a -1 seq number.\n        // This ensures a zero seq number when the transaction is built (TransactionBuilder increments once).\n        const tempAcct = new StellarSdk.Account(publicKey, '-1');\n        const testnet = new StellarSdk.Server('https://horizon-testnet.stellar.org')\n        const fee = await testnet.fetchBaseFee();\n        const txBuilder = new StellarSdk.TransactionBuilder(tempAcct, {fee, networkPassphrase: StellarSdk.Networks.TESTNET});\n        \n        // add the manage data operations to specify the allowed txHashes to be run for this user\n        for (const hash of txFunctionHashes) {\n            txBuilder.addOperation(StellarSdk.Operation.manageData({\n                name: \"txFunctionHash\",\n                value: hash\n            }));\n        }\n        \n        // set TTL on the token for 1 hour\n        const tx = txBuilder.setTimeout(24*60*60).build();\n        const txHashed = tx.toEnvelope().toXDR('base64')\n        const txSigned = await userSignTransaction(txHashed, \"TESTNET\")\n        \n        // sign the TX with the source account of the Transaction. This token is now valid for this public key!\n        // tx.sign(privateKeypair);\n\n        // this is the XDR Token\n        // const token = txSigned.toEnvelope().toXDR('base64')\n\n        return txSigned;\n\n    } catch (e) {\n        alert(e);\n    }\n  };\n\n  const runFunc = async(\n    publicKey: string, \n    xdrToken: string, \n    turretURL: string,\n    funcHash: string\n  ) => {\n    console.log('Running function...')\n    const body = {\n        source: publicKey\n    }\n\n    const headers = {\n        \"Authorization\": \"Bearer \" + xdrToken\n    }\n\n    const response = await axios.post(turretURL + 'tx-functions/' + funcHash, body, {headers: headers})\n    return response.data\n  };\n\n  const turretSign = async(xdr: string, signer: string, signature: string) => {\n    console.log('Adding turret signature to transaction...')\n    const transaction = new StellarSdk.Transaction(xdr, StellarSdk.Networks.TESTNET)\n    transaction.addSignature(signer, signature)\n    return transaction.toXDR()\n  };\n\n  const sendTransaction = async(signedTxn: string) => {\n    console.log('Sending transaction...')\n    const serverUrl = \"https://horizon-testnet.stellar.org\"\n    const server = new StellarSdk.Server(serverUrl)\n    var txn = new StellarSdk.Transaction(signedTxn, StellarSdk.Networks.TESTNET)\n\n    const txnString = txn.toEnvelope().toXDR('base64')\n    const txnSignedComplete = await userSignTransaction(txnString, \"TESTNET\")\n    const txnToSubmit = StellarSdk.TransactionBuilder.fromXDR(\n      txnSignedComplete,\n      serverUrl\n    );\n    const response = await server.submitTransaction(txnToSubmit);\n    return response\n  };\n\n////////////////////////////////////////////////////\n\n  const buttonGenerateXDRToken = async () => {\n    const res = await generateXDRToken(['9d64bd82134a1c141501dc16dca992446ecdc1812c1d75e8aab53443f879bf87'], 'GCLMGWD2PY6OSLMA5NMOKZNEILZJGR5IO5KZ4QN5BD67TXEQPKGX5FWR')\n    return res;\n  };\n  const buttonTopUp = async () => {\n    const payXDR = await payment('10', 'GB4OYM7TQTJSROWXHOJLKAX2IJ2QN4I6S6GCJH4MGWVTAO5Q5DPNADXX', 'GCLMGWD2PY6OSLMA5NMOKZNEILZJGR5IO5KZ4QN5BD67TXEQPKGX5FWR')\n    await topUp(payXDR, 'https://stellar-turrets-testnet.sdf-ecosystem.workers.dev/', 'GCLMGWD2PY6OSLMA5NMOKZNEILZJGR5IO5KZ4QN5BD67TXEQPKGX5FWR');\n  };\n  const buttonRunFunc = async () => {\n    const xdrToken = await generateXDRToken(['9d64bd82134a1c141501dc16dca992446ecdc1812c1d75e8aab53443f879bf87'], 'GCLMGWD2PY6OSLMA5NMOKZNEILZJGR5IO5KZ4QN5BD67TXEQPKGX5FWR')\n    const runResult = await runFunc('GCLMGWD2PY6OSLMA5NMOKZNEILZJGR5IO5KZ4QN5BD67TXEQPKGX5FWR', xdrToken, 'https://stellar-turrets-testnet.sdf-ecosystem.workers.dev/', '9d64bd82134a1c141501dc16dca992446ecdc1812c1d75e8aab53443f879bf87')\n    console.log(runResult)\n    const resultSigned = await turretSign(runResult.xdr, runResult.signer, runResult.signature)\n    const res = await sendTransaction(resultSigned)\n    console.log(res)\n  };\n////////////////////////////////////////////////////\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <button onClick={checkFreighter}>\n          Check Wallet\n        </button>\n        <button onClick={retrievePublicKey}>\n          Get Public Key\n        </button>\n        <button onClick={retrieveNetwork}>\n          Get Network\n        </button>\n        <button onClick={buttonTopUp}>\n          Top Up\n        </button>\n        <button onClick={buttonRunFunc}>\n          Run Function\n        </button>\n      </header>\n      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}